#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Miro Engine - –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å
"""

import sys
import time
import getpass
from pathlib import Path
from typing import List

from _helper.miro_api import MiroAPI
from _helper.instruction_parser import InstructionParser
from _helper.command_executor import CommandExecutor

class MiroEngine:
    """–û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫"""
    
    def __init__(self, token: str, board_id: str):
        self.api = MiroAPI(token, board_id)
        self.parser = InstructionParser()
        self.executor = CommandExecutor(self.api)
    
    def process_file(self, file_path: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
        print("-" * 50)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        instructions = self.parser.parse_file(file_path)
        if not instructions:
            print("  ‚ö†Ô∏è  –ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ")
            return False
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        success_count = 0
        for instruction in instructions:
            if self.executor.execute(instruction):
                success_count += 1
        
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {success_count}/{len(instructions)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        return success_count > 0
    
    def find_instruction_files(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
        files = []
        
        # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ instructions
        instructions_dir = Path("instructions")
        if instructions_dir.exists():
            files.extend(sorted(instructions_dir.glob("*.txt")))
        
        # –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
        files.extend(sorted(Path(".").glob("*_instructions.txt")))
        
        return files

def get_credentials():
    """–ü–æ–ª—É—á–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Miro:")
    print("-"*60)
    
    # Token
    print("\nüìå –ì–¥–µ –≤–∑—è—Ç—å —Ç–æ–∫–µ–Ω:")
    print("  1. –í–æ–π–¥–∏—Ç–µ –≤ Miro")
    print("  2. Settings ‚Üí Apps ‚Üí Your apps")
    print("  3. Create new app ‚Üí Get OAuth token")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ (—Å–∫—Ä—ã—Ç—ã–π)
    token = getpass.getpass("\n‚û§ –í–≤–µ–¥–∏—Ç–µ API Token (–≤–≤–æ–¥ —Å–∫—Ä—ã—Ç): ").strip()
    if not token:
        print("‚ùå Token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    masked_token = token[:10] + "..." if len(token) > 10 else token
    print(f"  ‚úì Token –ø–æ–ª—É—á–µ–Ω: {masked_token}")
    
    # Board ID
    print("\nüìå –ì–¥–µ –≤–∑—è—Ç—å Board ID:")
    print("  –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å–∫—É ‚Üí —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL")
    print("  –ü—Ä–∏–º–µ—Ä: miro.com/app/board/{BOARD_ID}/")
    
    board_id = input("\n‚û§ –í–≤–µ–¥–∏—Ç–µ Board ID: ").strip()
    if not board_id:
        print("‚ùå Board ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        sys.exit(1)
    
    return token, board_id

def select_files(files: List[Path]) -> List[Path]:
    """–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {len(files)}")
    for i, file in enumerate(files, 1):
        print(f"  {i}. {file}")
    
    print("\n‚û§ –ö–∞–∫–∏–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å?")
    print("  1. –í—Å–µ —Ñ–∞–π–ª—ã")
    print("  2. –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ")
    
    choice = input("–í—ã–±–æ—Ä (1/2): ").strip()
    
    if choice == "2":
        numbers = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").strip()
        try:
            indices = [int(n.strip())-1 for n in numbers.split(',')]
            return [files[i] for i in indices if 0 <= i < len(files)]
        except:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            sys.exit(1)
    else:
        return files

def process_instructions(engine: MiroEngine, board_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    print("\nüìÇ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...")
    print("-"*60)
    
    files = engine.find_instruction_files()
    if not files:
        print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π!")
        print("\n–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ 'instructions/'")
        return False
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
    selected_files = select_files(files)
    if not selected_files:
        print("‚ùå –§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
        return False
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\nüìå –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(selected_files)}")
    confirm = input("‚û§ –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    
    if confirm not in ["–¥–∞", "yes", "y", "–¥"]:
        print("‚ö†Ô∏è  –û—Ç–º–µ–Ω–µ–Ω–æ")
        return False
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    print("\n" + "="*60)
    print("üéØ –ù–ê–ß–ò–ù–ê–Æ –û–ë–†–ê–ë–û–¢–ö–£")
    print("="*60)
    
    for file_path in selected_files:
        engine.process_file(file_path)
        time.sleep(1)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    engine.executor.print_stats()
    
    print(f"\nüîó –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    print(f"   https://miro.com/app/board/{board_id}/")
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º"""
    print("\n" + "="*60)
    print("   üöÄ MIRO ENGINE - UNIVERSAL DIAGRAM BUILDER")
    print("="*60)
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–¥–∏–Ω —Ä–∞–∑)
    token, board_id = get_credentials()
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ (–æ–¥–∏–Ω —Ä–∞–∑)
    engine = MiroEngine(token, board_id)
    
    # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    while True:
        print("\n" + "="*60)
        print("üîÑ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
        print("="*60)
        print("1. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã")
        print("3. –°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω")
        print("4. –°–º–µ–Ω–∏—Ç—å –¥–æ—Å–∫—É")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\n‚û§ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
        
        if choice == "1":
            process_instructions(engine, board_id)
            
        elif choice == "2":
            files = engine.find_instruction_files()
            if files:
                print(f"\nüìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
                for i, file_path in enumerate(files, 1):
                    print(f"  {i}. {file_path.name}")
            else:
                print("\n‚ùå –§–∞–π–ª—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        elif choice == "3":
            print("\nüîë –°–ú–ï–ù–ê –¢–û–ö–ï–ù–ê")
            print("-"*60)
            print("üìå –ì–¥–µ –≤–∑—è—Ç—å —Ç–æ–∫–µ–Ω:")
            print("  1. –í–æ–π–¥–∏—Ç–µ –≤ Miro")
            print("  2. Settings ‚Üí Apps ‚Üí Your apps")
            print("  3. Create new app ‚Üí Get OAuth token")
            
            new_token = getpass.getpass("\n‚û§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API Token (–≤–≤–æ–¥ —Å–∫—Ä—ã—Ç): ").strip()
            if new_token:
                token = new_token
                engine = MiroEngine(token, board_id)  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
                masked_token = token[:10] + "..." if len(token) > 10 else token
                print(f"‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: {masked_token}")
            else:
                print("‚ö†Ô∏è  –¢–æ–∫–µ–Ω –Ω–µ –∏–∑–º–µ–Ω–µ–Ω")
                
        elif choice == "4":
            print("\nüìã –°–ú–ï–ù–ê –î–û–°–ö–ò")
            print("-"*60)
            print("üìå –ì–¥–µ –≤–∑—è—Ç—å Board ID:")
            print("  –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å–∫—É ‚Üí —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL")
            print("  –ü—Ä–∏–º–µ—Ä: miro.com/app/board/{BOARD_ID}/")
            print(f"\n  –¢–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞: {board_id}")
            
            new_board_id = input("\n‚û§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Board ID: ").strip()
            if new_board_id:
                board_id = new_board_id
                engine = MiroEngine(token, board_id)  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
                print(f"‚úÖ –î–æ—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {board_id}")
            else:
                print("‚ö†Ô∏è  –î–æ—Å–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞")
                
        elif choice == "5":
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("\n‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
        input("\nüìå –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()