#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Miro Engine - –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å
"""

from pathlib import Path
from typing import List

from _helper.miro_api import MiroAPI
from _helper.instruction_parser import InstructionParser
from _helper.command_executor import CommandExecutor
from _helper.menu_handler import MenuHandler

class MiroEngine:
    """–û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫"""
    
    def __init__(self, token: str, board_id: str):
        self.api = MiroAPI(token, board_id)
        self.parser = InstructionParser()
        self.executor = CommandExecutor(self.api)
    
    def process_file(self, file_path: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
        print("-" * 50)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        instructions = self.parser.parse_file(file_path)
        if not instructions:
            print("  ‚ö†Ô∏è  –ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ")
            return False
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        success_count = 0
        for instruction in instructions:
            if self.executor.execute(instruction):
                success_count += 1
        
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {success_count}/{len(instructions)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        return success_count > 0
    
    def find_instruction_files(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
        files = []
        
        # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ instructions
        instructions_dir = Path("instructions")
        if instructions_dir.exists():
            files.extend(sorted(instructions_dir.glob("*.txt")))
        
        # –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
        files.extend(sorted(Path(".").glob("*_instructions.txt")))
        
        return files

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º"""
    print("\n" + "="*60)
    print("   üöÄ MIRO ENGINE - UNIVERSAL DIAGRAM BUILDER")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
    menu = MenuHandler()
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–¥–∏–Ω —Ä–∞–∑)
    token, board_id = menu.get_credentials()
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ (–æ–¥–∏–Ω —Ä–∞–∑)
    engine = MiroEngine(token, board_id)
    
    # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    while True:
        choice = menu.show_main_menu()
        
        if choice == "1":
            menu.process_instructions(engine, board_id)
            
        elif choice == "2":
            menu.show_files(engine)
                
        elif choice == "3":
            result = menu.change_token(MiroEngine, board_id)
            if result[0]:  # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–µ–Ω
                token, engine = result
                
        elif choice == "4":
            result = menu.change_board(MiroEngine, token, board_id)
            if result[0]:  # –ï—Å–ª–∏ –¥–æ—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞
                board_id, engine = result
                
        elif choice == "5":
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("\n‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
        input("\nüìå –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()